package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/cupbot/cupbot/internal/auth"
	"github.com/cupbot/cupbot/internal/config"
	"github.com/cupbot/cupbot/internal/database"
	"github.com/cupbot/cupbot/internal/events"
	"github.com/cupbot/cupbot/internal/filemanager"
	"github.com/cupbot/cupbot/internal/screenshot"
	"github.com/cupbot/cupbot/internal/system"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	api               *tgbotapi.BotAPI
	config            *config.Config
	db                *database.DB
	authMw            *auth.Middleware
	systemService     *system.Service
	fileManager       *filemanager.Service
	screenshotService *screenshot.Service
	eventsService     *events.Service
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(cfg *config.Config, db *database.DB) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.Bot.Token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	api.Debug = cfg.Bot.Debug

	bot := &Bot{
		api:               api,
		config:            cfg,
		db:                db,
		authMw:            auth.NewMiddleware(cfg, db),
		systemService:     system.NewService(),
		fileManager:       filemanager.NewService(cfg),
		screenshotService: screenshot.NewService(cfg),
		eventsService:     events.NewService(cfg),
	}

	log.Printf("Authorized on account %s", api.Self.UserName)
	return bot, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	// Start events monitoring
	if err := b.eventsService.Start(); err != nil {
		log.Printf("Warning: Failed to start events service: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	log.Println("Bot started. Waiting for messages...")

	for update := range updates {
		go b.handleUpdate(update)
	}

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Stop() {
	b.api.StopReceivingUpdates()
	b.eventsService.Stop()
	log.Println("Bot stopped")
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (b *Bot) handleUpdate(update tgbotapi.Update) {
	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	authorized, user := b.authMw.AuthorizeUser(update)
	if !authorized {
		b.sendUnauthorizedMessage(update)
		return
	}

	if update.Message != nil {
		b.handleMessage(update.Message, user)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery, user)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message, user *database.User) {
	if !message.IsCommand() {
		return
	}

	command := message.Command()
	args := message.CommandArguments()

	log.Printf("User %d (%s) executed command: %s %s", user.ID, user.Username, command, args)

	var response string
	var success bool

	switch command {
	case "start":
		response, success = b.handleStart(message, user)
	case "help", "menu":
		response, success = b.handleHelp(message, user)
	case "status":
		response, success = b.handleStatusInternal(user)
	case "uptime":
		response, success = b.handleUptimeInternal(user)
	case "history":
		response, success = b.handleHistoryInternal(user, args)
	case "users":
		response, success = b.handleUsersInternal(user)
	case "stats":
		response, success = b.handleStatsInternal(user)
	case "cleanup":
		response, success = b.handleCleanup(message, user, args)
	case "addadmin":
		response, success = b.handleAddAdmin(message, user, args)
	case "removeadmin":
		response, success = b.handleRemoveAdmin(message, user, args)
	case "banuser":
		response, success = b.handleBanUser(message, user, args)
	case "unbanuser":
		response, success = b.handleUnbanUser(message, user, args)
	case "deleteuser":
		response, success = b.handleDeleteUser(message, user, args)
	case "files":
		response, success = b.handleFiles(message, user, args)
	case "screenshot":
		response, success = b.handleScreenshot(message, user, args)
	default:
		response = fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", command)
		success = false
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	if response != "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ParseMode = tgbotapi.ModeMarkdown

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∫—Ä–æ–º–µ start)
		if command != "start" {
			msg.ReplyMarkup = b.getMenuKeyboard()
		}

		// –î–ª—è –∫–æ–º–∞–Ω–¥ help –∏ menu –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		if command == "help" || command == "menu" {
			msg.ReplyMarkup = b.getMainKeyboard(user.IsAdmin)
		}

		if _, err := b.api.Send(msg); err != nil {
			log.Printf("Failed to send message: %v", err)
		}
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	b.authMw.LogCommand(user.ID, command, args, success, response)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã
func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery, user *database.User) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	b.api.Request(callbackResponse)

	var response string
	var success bool

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–ª–±—ç–∫ –¥–∞–Ω–Ω—ã–µ
	switch callback.Data {
	case "status":
		response, success = b.handleStatusCallback(user)
	case "uptime":
		response, success = b.handleUptimeCallback(user)
	case "history":
		response, success = b.handleHistoryCallback(user)
	case "users":
		response, success = b.handleUsersCallback(user)
	case "stats":
		response, success = b.handleStatsCallback(user)
	case "admin_menu":
		response, success = b.handleAdminMenuCallback(user)
	case "main_menu":
		response, success = b.handleMainMenuCallback(user)
	case "files":
		response, success = b.handleFilesCallback(user)
	case "screenshot":
		response, success = b.handleScreenshotCallback(user)
	case "events":
		response, success = b.handleEventsCallback(user)
	case "menu":
		response, success = b.handleMenuCallback(user)
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
		success = false
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	if response != "" {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, response)
		msg.ParseMode = tgbotapi.ModeMarkdown

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ callback –æ—Ç–≤–µ—Ç–∞
		if callback.Data != "main_menu" && callback.Data != "admin_menu" && callback.Data != "menu" {
			msg.ReplyMarkup = b.getMenuKeyboard()
		}

		// –î–ª—è –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		if callback.Data == "main_menu" || callback.Data == "menu" {
			msg.ReplyMarkup = b.getMainKeyboard(user.IsAdmin)
		} else if callback.Data == "admin_menu" {
			msg.ReplyMarkup = b.getAdminKeyboard()
		}

		if _, err := b.api.Send(msg); err != nil {
			log.Printf("Failed to send callback response: %v", err)
		}
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	b.authMw.LogCommand(user.ID, "callback:"+callback.Data, "", success, response)

	log.Printf("Callback from user %d: %s", user.ID, callback.Data)
}

// sendUnauthorizedMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ø—Ä–∞–≤
func (b *Bot) sendUnauthorizedMessage(update tgbotapi.Update) {
	var chatID int64
	if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
	} else {
		return
	}

	msg := tgbotapi.NewMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
	b.api.Send(msg)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(message *tgbotapi.Message, user *database.User) (string, bool) {
	welcome := fmt.Sprintf(`ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CupBot!*

–ü—Ä–∏–≤–µ—Ç, %s! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.

üìä *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥`, user.FirstName)

	if user.IsAdmin {
		welcome += `

üîë *–í—ã ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö`
	}

	welcome += `

üì± *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*`

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(message.Chat.ID, welcome)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = b.getMainKeyboard(user.IsAdmin)
	b.api.Send(msg)

	return "", true // –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(message *tgbotapi.Message, user *database.User) (string, bool) {
	help := `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/uptime - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
/history [N] - –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
/files [–ø—É—Ç—å] - –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
/screenshot - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞`

	if user.IsAdmin {
		help += `

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
/cleanup [–¥–Ω–∏] - –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
/addadmin [ID] - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/removeadmin [ID] - –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/banuser [ID] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unbanuser [ID] - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/deleteuser [ID] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
	}

	help += `

*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é
‚Ä¢ –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø`

	return help, true
}

// handleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (b *Bot) handleStatus(message *tgbotapi.Message, user *database.User) (string, bool) {
	sysInfo, err := b.systemService.GetSystemInfo()
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: %v", err), false
	}

	response := "üíª *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"

	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	response += fmt.Sprintf("üñ•Ô∏è *–•–æ—Å—Ç:* %s\n", sysInfo.Hostname)
	response += fmt.Sprintf("üîß *–û–°:* %s %s\n", sysInfo.OS, sysInfo.Platform)
	response += fmt.Sprintf("‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* %s\n", formatDuration(sysInfo.Uptime))
	response += fmt.Sprintf("üîÑ *–ü—Ä–æ—Ü–µ—Å—Å–æ–≤:* %d\n\n", sysInfo.ProcessCount)

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU
	response += "üß† *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:*\n"
	response += fmt.Sprintf("   ‚Ä¢ –ú–æ–¥–µ–ª—å: %s\n", sysInfo.CPUInfo.ModelName)
	response += fmt.Sprintf("   ‚Ä¢ –Ø–¥–µ—Ä: %d\n", sysInfo.CPUInfo.Cores)
	if len(sysInfo.CPUInfo.Usage) > 0 {
		avgUsage := 0.0
		for _, usage := range sysInfo.CPUInfo.Usage {
			avgUsage += usage
		}
		avgUsage /= float64(len(sysInfo.CPUInfo.Usage))
		response += fmt.Sprintf("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: %.1f%%\n", avgUsage)
	}
	if sysInfo.CPUInfo.Temperature > 0 {
		response += fmt.Sprintf("   ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", sysInfo.CPUInfo.Temperature)
	}
	response += "\n"

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
	response += "üßÆ *–ü–∞–º—è—Ç—å:*\n"
	response += fmt.Sprintf("   ‚Ä¢ –í—Å–µ–≥–æ: %s\n", system.FormatBytes(sysInfo.MemoryInfo.Total))
	response += fmt.Sprintf("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %s (%.1f%%)\n",
		system.FormatBytes(sysInfo.MemoryInfo.Used), sysInfo.MemoryInfo.UsedPercent)
	response += fmt.Sprintf("   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: %s\n\n", system.FormatBytes(sysInfo.MemoryInfo.Available))

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö
	response += "üíæ *–î–∏—Å–∫–∏:*\n"
	for _, disk := range sysInfo.DiskInfo {
		if disk.Total > 0 {
			response += fmt.Sprintf("   ‚Ä¢ %s (%s)\n", disk.Device, disk.Fstype)
			response += fmt.Sprintf("     –í—Å–µ–≥–æ: %s | –°–≤–æ–±–æ–¥–Ω–æ: %s (%.1f%%)\n",
				system.FormatBytes(disk.Total), system.FormatBytes(disk.Free), 100-disk.UsedPercent)
		}
	}

	// –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
	activeInterfaces := 0
	for _, net := range sysInfo.NetworkInfo {
		if net.BytesSent > 0 || net.BytesRecv > 0 {
			activeInterfaces++
		}
	}

	if activeInterfaces > 0 {
		response += "\nüåê *–°–µ—Ç—å (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã):*\n"
		for _, net := range sysInfo.NetworkInfo {
			if net.BytesSent > 0 || net.BytesRecv > 0 {
				response += fmt.Sprintf("   ‚Ä¢ %s\n", net.Name)
				response += fmt.Sprintf("     –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s | –ü–æ–ª—É—á–µ–Ω–æ: %s\n",
					system.FormatBytes(net.BytesSent), system.FormatBytes(net.BytesRecv))
			}
		}
	}

	return response, true
}
func (b *Bot) handleUptime(message *tgbotapi.Message, user *database.User) (string, bool) {
	return b.handleUptimeInternal(user)
}

func (b *Bot) handleUptimeInternal(user *database.User) (string, bool) {
	uptime, err := b.systemService.GetUptime()
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: %v", err), false
	}

	return fmt.Sprintf("‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:* %s", formatDuration(uptime)), true
}

// handleHistory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /history
func (b *Bot) handleHistory(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	limit := 10
	if args != "" {
		if n, err := parseLimit(args); err == nil && n > 0 && n <= 50 {
			limit = n
		}
	}

	history, err := b.authMw.GetUserHistory(user.ID, limit)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err), false
	}

	if len(history) == 0 {
		return "üìù –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞", true
	}

	response := fmt.Sprintf("üìù *–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ %d):\n\n", len(history))
	for i, cmd := range history {
		status := "‚úÖ"
		if !cmd.Success {
			status = "‚ùå"
		}
		response += fmt.Sprintf("%d. %s `/%s %s`\n   _–í—Ä–µ–º—è: %s_\n\n",
			i+1, status, cmd.Command, cmd.Arguments, cmd.ExecutedAt.Format("02.01.2006 15:04:05"))
	}

	return response, true
}

// handleUsers –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /users (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleUsers(message *tgbotapi.Message, user *database.User) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	users, err := b.authMw.GetAllUsers(user.ID)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err), false
	}

	if len(users) == 0 {
		return "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", true
	}

	response := "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
	for i, u := range users {
		status := "üü¢"
		if !u.IsActive {
			status = "üî¥"
		}
		role := "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
		if u.IsAdmin {
			role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
		}
		response += fmt.Sprintf("%d. %s *%s %s* (@%s)\n   ID: %d | %s\n   –°–æ–∑–¥–∞–Ω: %s\n\n",
			i+1, status, u.FirstName, u.LastName, u.Username, u.ID, role,
			u.CreatedAt.Format("02.01.2006 15:04"))
	}

	return response, true
}

// handleStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleStats(message *tgbotapi.Message, user *database.User) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	stats, err := b.authMw.GetStats(user.ID)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err), false
	}

	response := "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n\n"
	response += fmt.Sprintf("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v\n", stats["total_users"])
	response += fmt.Sprintf("üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v\n", stats["active_users"])
	response += fmt.Sprintf("üìù –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: %v\n", stats["total_commands"])
	response += fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: %v\n", stats["successful_commands"])
	response += fmt.Sprintf("üïê –ö–æ–º–∞–Ω–¥ –∑–∞ 24 —á–∞—Å–∞: %v\n", stats["recent_commands"])

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
	if total := stats["total_commands"].(int); total > 0 {
		successful := stats["successful_commands"].(int)
		successRate := float64(successful) * 100 / float64(total)
		response += fmt.Sprintf("üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: %.1f%%", successRate)
	}

	return response, true
}

// handleCleanup –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cleanup (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleCleanup(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	days := 30
	if args != "" {
		if n, err := parseLimit(args); err == nil && n > 0 && n <= 365 {
			days = n
		}
	}

	err := b.authMw.CleanupOldData(user.ID, days)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err), false
	}

	return fmt.Sprintf("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ %d –¥–Ω–µ–π.", days), true
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// formatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatDuration(d time.Duration) string {
	days := int(d.Hours()) / 24
	hours := int(d.Hours()) % 24
	minutes := int(d.Minutes()) % 60

	if days > 0 {
		return fmt.Sprintf("%d –¥–Ω. %d —á. %d –º–∏–Ω.", days, hours, minutes)
	}
	if hours > 0 {
		return fmt.Sprintf("%d —á. %d –º–∏–Ω.", hours, minutes)
	}
	return fmt.Sprintf("%d –º–∏–Ω.", minutes)
}

// parseLimit –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
func parseLimit(s string) (int, error) {
	var n int
	_, err := fmt.Sscanf(strings.TrimSpace(s), "%d", &n)
	return n, err
}

// handleAddAdmin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addadmin (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleAddAdmin(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	if args == "" {
		return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /addadmin 123456789", false
	}

	userID, err := parseUserID(args)
	if err != nil {
		return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", false
	}

	err = b.authMw.SetUserAdmin(user.ID, userID, true)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err), false
	}

	return fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", userID), true
}

// handleRemoveAdmin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /removeadmin (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleRemoveAdmin(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	if args == "" {
		return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /removeadmin 123456789", false
	}

	userID, err := parseUserID(args)
	if err != nil {
		return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", false
	}

	if userID == user.ID {
		return "‚ùå –ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —Å–µ–±—è", false
	}

	err = b.authMw.SetUserAdmin(user.ID, userID, false)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err), false
	}

	return fmt.Sprintf("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —É–±—Ä–∞–Ω—ã", userID), true
}

// handleBanUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /banuser (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleBanUser(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	if args == "" {
		return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /banuser 123456789", false
	}

	userID, err := parseUserID(args)
	if err != nil {
		return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", false
	}

	if userID == user.ID {
		return "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è", false
	}

	err = b.authMw.SetUserActive(user.ID, userID, false)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err), false
	}

	return fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", userID), true
}

// handleUnbanUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /unbanuser (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleUnbanUser(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	if args == "" {
		return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /unbanuser 123456789", false
	}

	userID, err := parseUserID(args)
	if err != nil {
		return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", false
	}

	err = b.authMw.SetUserActive(user.ID, userID, true)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err), false
	}

	return fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", userID), true
}

// handleDeleteUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /deleteuser (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
func (b *Bot) handleDeleteUser(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false
	}

	if args == "" {
		return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /deleteuser 123456789", false
	}

	userID, err := parseUserID(args)
	if err != nil {
		return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", false
	}

	if userID == user.ID {
		return "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è", false
	}

	err = b.authMw.DeleteUser(user.ID, userID)
	if err != nil {
		return fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err), false
	}

	return fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É–¥–∞–ª–µ–Ω", userID), true
}

// parseUserID –ø–∞—Ä—Å–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
func parseUserID(s string) (int64, error) {
	var userID int64
	_, err := fmt.Sscanf(strings.TrimSpace(s), "%d", &userID)
	return userID, err
}

// getMainKeyboard returns the main keyboard
func (b *Bot) getMainKeyboard(isAdmin bool) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// Basic buttons
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üíª System Status", "status"),
		tgbotapi.NewInlineKeyboardButtonData("‚è∞ Uptime", "uptime"),
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üìù Command History", "history"),
		tgbotapi.NewInlineKeyboardButtonData("üìÅ File Manager", "files"),
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üì∏ Screenshot", "screenshot"),
		tgbotapi.NewInlineKeyboardButtonData("üîî Events", "events"),
	})

	// Admin buttons
	if isAdmin {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üë• Users", "users"),
			tgbotapi.NewInlineKeyboardButtonData("üìä Statistics", "stats"),
		})
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// Callback handlers
func (b *Bot) handleStatusCallback(user *database.User) (string, bool) {
	return b.handleStatusInternal(user)
}

func (b *Bot) handleUptimeCallback(user *database.User) (string, bool) {
	return b.handleUptimeInternal(user)
}

func (b *Bot) handleHistoryCallback(user *database.User) (string, bool) {
	return b.handleHistoryInternal(user, "")
}

func (b *Bot) handleUsersCallback(user *database.User) (string, bool) {
	return b.handleUsersInternal(user)
}

func (b *Bot) handleStatsCallback(user *database.User) (string, bool) {
	return b.handleStatsInternal(user)
}

func (b *Bot) handleAdminMenuCallback(user *database.User) (string, bool) {
	if !user.IsAdmin {
		return "‚ùå Access denied", false
	}
	return "üîë *Admin Menu*\n\nSelect an action:", true
}

func (b *Bot) handleMainMenuCallback(user *database.User) (string, bool) {
	return fmt.Sprintf("üè† *Main Menu*\n\nHello, %s! Choose an action:", user.FirstName), true
}

// Missing internal handler methods
func (b *Bot) handleStatusInternal(user *database.User) (string, bool) {
	return b.handleStatus(nil, user)
}

func (b *Bot) handleHistoryInternal(user *database.User, args string) (string, bool) {
	return b.handleHistory(nil, user, args)
}

func (b *Bot) handleUsersInternal(user *database.User) (string, bool) {
	return b.handleUsers(nil, user)
}

func (b *Bot) handleStatsInternal(user *database.User) (string, bool) {
	return b.handleStats(nil, user)
}

// getAdminKeyboard returns admin-specific keyboard
func (b *Bot) getAdminKeyboard() tgbotapi.InlineKeyboardMarkup {
	rows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üë• Manage Users", "users"),
			tgbotapi.NewInlineKeyboardButtonData("üìä View Stats", "stats"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üè† Main Menu", "main_menu"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// getMenuKeyboard returns simple menu button
func (b *Bot) getMenuKeyboard() tgbotapi.InlineKeyboardMarkup {
	rows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üìú Menu", "menu"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// New service handlers
func (b *Bot) handleFiles(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	if args == "" {
		// List available drives
		drives := b.fileManager.GetAvailableDrives()
		if len(drives) == 0 {
			return "‚ùå No drives available in configuration", false
		}

		response := "üìÅ *File Manager*\n\nAvailable drives:\n"
		for _, drive := range drives {
			response += fmt.Sprintf("‚Ä¢ %s\n", drive)
		}
		response += "\nUsage: `/files <drive>` to browse\nExample: `/files C:`"
		return response, true
	}

	// List directory contents
	files, err := b.fileManager.ListDirectory(args)
	if err != nil {
		return fmt.Sprintf("‚ùå Error listing directory: %v", err), false
	}

	response := fmt.Sprintf("üìÅ *Directory: %s*\n\n", args)
	for i, file := range files {
		if i >= 20 { // Limit to 20 items
			response += "... and more\n"
			break
		}
		icon := "üìÑ"
		if file.IsDir {
			icon = "üìÅ"
		}
		sizeStr := "<DIR>"
		if !file.IsDir {
			sizeStr = filemanager.FormatSize(file.Size)
		}
		response += fmt.Sprintf("%s %s (%s)\n", icon, file.Name, sizeStr)
	}

	return response, true
}

func (b *Bot) handleScreenshot(message *tgbotapi.Message, user *database.User, args string) (string, bool) {
	filename, err := b.screenshotService.TakeScreenshot()
	if err != nil {
		return fmt.Sprintf("‚ùå Error taking screenshot: %v", err), false
	}

	// Send screenshot as photo
	photo := tgbotapi.NewPhoto(message.Chat.ID, tgbotapi.FilePath(filename))
	photo.Caption = fmt.Sprintf("üì∏ Desktop Screenshot\nTaken at: %s", time.Now().Format("2006-01-02 15:04:05"))

	if _, err := b.api.Send(photo); err != nil {
		return fmt.Sprintf("‚ùå Error sending screenshot: %v", err), false
	}

	return "üì∏ Screenshot taken and sent!", true
}

// Callback handlers for new services
func (b *Bot) handleFilesCallback(user *database.User) (string, bool) {
	drives := b.fileManager.GetAvailableDrives()
	if len(drives) == 0 {
		return "‚ùå No drives available in configuration", false
	}

	response := "üìÅ *File Manager*\n\nAvailable drives:\n"
	for _, drive := range drives {
		response += fmt.Sprintf("‚Ä¢ %s\n", drive)
	}
	response += "\nUse command `/files <drive>` to browse\nExample: `/files C:`"
	return response, true
}

func (b *Bot) handleScreenshotCallback(user *database.User) (string, bool) {
	return "üì∏ *Screenshot Service*\n\nUse `/screenshot` command to take a desktop screenshot.", true
}

func (b *Bot) handleEventsCallback(user *database.User) (string, bool) {
	// For now, just return that the service is enabled
	status := "running"
	if !b.config.Events.Enabled {
		status = "disabled"
	}

	return fmt.Sprintf("üîî *System Events Monitor*\n\nStatus: %s\n\nMonitoring system events and sending notifications.", status), true
}

func (b *Bot) handleMenuCallback(user *database.User) (string, bool) {
	return fmt.Sprintf("üìú *Menu*\n\nHello, %s! Choose an action:", user.FirstName), true
}
